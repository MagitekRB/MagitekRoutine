name: release

on:
  pull_request:
    types: [closed]
    branches: [ "master" ]
  workflow_dispatch:

permissions: write-all

jobs:
  release:
    name: "Release"
    runs-on: windows-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'

    permissions: write-all

    steps:
    - uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install zipfile36

    - name: Get latest release version
      id: get_latest_version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $releases = Invoke-RestMethod -Headers @{Authorization = "token $env:GITHUB_TOKEN"} -Uri "https://api.github.com/repos/${{ github.repository }}/releases"
        $latestVersion = $releases | Where-Object { -not $_.prerelease } | Select-Object -First 1
        if ($latestVersion) {
          $version = $latestVersion.tag_name -replace 'v', ''
          $parts = $version.Split('.')
          $major = $parts[0]
          $minor = $parts[1]
          $patch = [int]$parts[2] + 1
          echo "VERSION=$major.$minor.$patch" >> $env:GITHUB_ENV
        } else {
          $buildNumber = ${{ github.run_number }}
          $newVersion = 50 + $buildNumber
          echo "VERSION=1.0.$newVersion" >> $env:GITHUB_ENV
        }
        Write-Host "Next version will be: $env:VERSION"
      shell: pwsh

    - name: Verify version string
      run: echo "Version is $env:VERSION"

    - name: Restore NuGet packages
      run: |
        cd Magitek
        nuget restore Magitek.sln

    - name: Update AssemblyInfo
      run: |
        $version = $env:VERSION
        Write-Host "Updating AssemblyInfo.cs with version $version"
        $assemblyInfoPath = "Magitek/Properties/AssemblyInfo.cs"
        (Get-Content $assemblyInfoPath) -replace '(\[assembly: AssemblyVersion\(")[^"]*("\)\])', "[assembly: AssemblyVersion(`"$version`")]" | Set-Content $assemblyInfoPath
        (Get-Content $assemblyInfoPath) -replace '(\[assembly: AssemblyFileVersion\(")[^"]*("\)\])', "[assembly: AssemblyFileVersion(`"$version`")]" | Set-Content $assemblyInfoPath

    - name: Verify AssemblyInfo
      run: |
        Write-Host "Contents of AssemblyInfo.cs after replacement:"
        Get-Content "Magitek/Properties/AssemblyInfo.cs"

    - name: Build solution
      run: |
        cd Magitek
        msbuild Magitek.sln /p:Configuration=Release

    - name: Generate Version.txt
      run: echo "v$env:VERSION" > ./Magitek/bin/release/Version.txt
      
    - name: Create Magitek.zip
      run: |
        python -c "
        import os
        import zipfile

        # Define paths
        zip_path = './Magitek/bin/release/Magitek.zip'

        # Step 1: Create initial zip archive with the specified files
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            zipf.write('./Magitek/bin/release/Magitek.dll', arcname='Magitek.dll')
            zipf.write('./Magitek/bin/release/Magitek.pdb', arcname='Magitek.pdb')
            zipf.write('./Magitek/bin/release/zh-CN/Magitek.resources.dll', arcname='zh-CN/Magitek.resources.dll')
            zipf.write('./Magitek/bin/release/Version.txt', arcname='Version.txt')
            zipf.write('./MagitekLoader/MagitekLoader.cs', arcname='MagitekLoader.cs')
            zipf.write('./Magitek/Properties/AssemblyInfo.cs', arcname='Properties/AssemblyInfo.cs')
        "

    - name: Upload Artifacts for Release
      uses: actions/upload-artifact@v4
      with:
        name: Magitek.zip
        path: ./Magitek/bin/release/Magitek.zip

    - name: Upload Version.txt for Release
      uses: actions/upload-artifact@v4
      with:
        name: Version.txt
        path: ./Magitek/bin/release/Version.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.VERSION }}
        name: v${{ env.VERSION }}
        generate_release_notes: true
        files: |
          ./Magitek/bin/release/Magitek.zip
          ./Magitek/bin/release/Version.txt
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

